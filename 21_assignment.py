# -*- coding: utf-8 -*-
"""21 assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15zJ4lksOFXGsz4GOnAl2b8bbq6eJXE-O
"""

#1solution

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def convertToBST(root):
    # Step 1: Perform inorder traversal and store values in a list
    def inorderTraversal(node, values):
        if node:
            inorderTraversal(node.left, values)
            values.append(node.val)
            inorderTraversal(node.right, values)

    values = []
    inorderTraversal(root, values)

    # Step 2: Sort the values
    values.sort()

    # Step 3: Replace node values with sorted values using inorder traversal
    index = 0
    def replaceValues(node):
        nonlocal index
        if node:
            replaceValues(node.left)
            node.val = values[index]
            index += 1
            replaceValues(node.right)

    replaceValues(root)

    return root



root = TreeNode(10)
root.left = TreeNode(2)
root.right = TreeNode(7)
root.left.left = TreeNode(8)
root.left.right = TreeNode(4)


bst_root = convertToBST(root)

#2solution

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def findDistance(root, node1, node2):
    # Step 1: Find the path from root to node1
    def findPathToNode(node, path, target):
        if node:
            path.append(node)
            if node.val == target:
                return True
            if node.val < target:
                return findPathToNode(node.right, path, target)
            else:
                return findPathToNode(node.left, path, target)
        return False

    path1 = []
    findPathToNode(root, path1, node1)

    # Step 2: Find the path from root to node2
    path2 = []
    findPathToNode(root, path2, node2)

    # Step 3: Find the lowest common ancestor (LCA)
    lca = None
    for i in range(min(len(path1), len(path2))):
        if path1[i] != path2[i]:
            break
        lca = path1[i]

    # Step 4: Calculate the distance from LCA to node1 and node2
    def findDistanceFromLCA(node, target):
        if node.val == target:
            return 0
        if node.val < target:
            return 1 + findDistanceFromLCA(node.right, target)
        else:
            return 1 + findDistanceFromLCA(node.left, target)

    distance1 = findDistanceFromLCA(lca, node1)
    distance2 = findDistanceFromLCA(lca, node2)

    # Step 5: Calculate the total distance between node1 and node2
    return distance1 + distance2


root = TreeNode(9)
root.left = TreeNode(5)
root.right = TreeNode(12)
root.left.left = TreeNode(3)
root.left.right = TreeNode(8)
root.left.left.left = TreeNode(2)
root.left.left.right = TreeNode(4)
root.left.right.left = TreeNode(7)
root.right.left = TreeNode(10)
root.right.right = TreeNode(15)
root.right.right.left = TreeNode(13)
root.right.right.right = TreeNode(17)


node1 = 7
node2 = 17
distance = findDistance(root, node1, node2)
print("Distance between", node1, "and", node2, ":", distance)

#3solution

class Node:
    def __init__(self, val):
        self.val = val
        self.prev = None
        self.next = None

def convertToDLL(root):
    def inorderTraversal(node, prev):
        if node:
          prev = inorderTraversal(node.left, prev)
            curr = Node(node.val)
            if prev:
                prev.next = curr
                curr.prev = prev
            else:
                head = curr
            prev = curr
            prev = inorderTraversal(node.right, prev)
        return prev

    head = None
    prev = None
    prev = inorderTraversal(root, prev)

    if prev:
        prev.next = None

    return head

# Create the binary tree
root = Node(10)
root.left = Node(5)
root.right = Node(20)
root.right.left = Node(30)
root.right.right = Node(35)

# Convert the binary tree to a doubly linked list
head = convertToDLL(root)

# Print the doubly linked list
current = head
while current:
    print(current.val, end=" ")
    current = current.next

#4solution

from collections import deque

class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
        self.next = None

def connect(root):
    if not root:
        return root

    queue = deque([root])

    while queue:
        size = len(queue)

        for i in range(size):
            node = queue.popleft()

            if i < size - 1:
                node.next = queue[0]

            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

    return root

# Create the binary tree
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)

# Connect nodes at the same level
connect(root)

# Test the connections
print(root.val, "->", root.next)
print(root.left.val, "->", root.left.next.val)
print(root.left.left.val, "->", root.left.left.next.val)
print(root.left.right.val, "->", root.left.right.next.val)
print(root.right.val, "->", root.right.next)
print(root.right.left.val, "->", root.right.left.next.val)
print(root.right.right.val, "->", root.right.right.next)

